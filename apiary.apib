FORMAT: 1A
HOST: http://127.0.0.1:8000/api/

# SoftDesk API
Welcome to the SoftDesk API documentation. This API allows you to manage users, projects, contributors, issues, and comments for a collaborative issue tracking platform.

## Group Users

### List all users [GET /users/]
- **Permissions:** Admin only
- **Description:** Retrieve a list of all users.

+ Response 200 (application/json)
    [
        {
            "id": 1,
            "username": "user1",
            "email": "user1@example.com",
            "age": 25
        }
    ]

### Create a user [POST /users/]
- **Permissions:** Public (No authentication required)
- **Description:** Register a new user.

+ Request (application/json)
    {
        "username": "newuser",
        "password": "mypassword",
        "email": "newuser@example.com",
        "age": 30
    }

+ Response 201 (application/json)
    {
        "id": 2,
        "username": "newuser",
        "email": "newuser@example.com",
        "age": 30
    }

### Retrieve a user [GET /users/{id}/]
- **Permissions:** Admin or the user themselves
- **Description:** Retrieve details of a specific user.

+ Parameters
    + id: `1` (number, required) - The ID of the user.

+ Response 200 (application/json)
    {
        "id": 1,
        "username": "user1",
        "email": "user1@example.com",
        "age": 25
    }

### Update a user [PUT /users/{id}/]
- **Permissions:** Admin or the user themselves
- **Description:** Update the details of a specific user.

+ Request (application/json)
    {
        "email": "updateduser@example.com",
        "age": 26
    }

+ Response 200 (application/json)
    {
        "id": 1,
        "username": "user1",
        "email": "updateduser@example.com",
        "age": 26
    }

### Delete a user [DELETE /users/{id}/]
- **Permissions:** Admin or the user themselves
- **Description:** Delete a specific user.

+ Response 204

---
## Group Projects

### List all projects [GET /projects/]
- **Permissions:** Admin or project contributors
- **Description:** Retrieve all projects.

+ Response 200 (application/json)
    [
        {
            "id": 1,
            "name": "Project A",
            "description": "A description of Project A.",
            "author_user": 1
        }
    ]

### Create a project [POST /projects/]
- **Permissions:** Authenticated users
- **Description:** Create a new project.

+ Request (application/json)
    {
        "name": "Project B",
        "description": "A description of Project B."
    }

+ Response 201 (application/json)
    {
        "id": 2,
        "name": "Project B",
        "description": "A description of Project B.",
        "author_user": 1
    }

### Retrieve a project [GET /projects/{id}/]
- **Permissions:** Admin or project contributors
- **Description:** Retrieve details of a specific project.

+ Response 200 (application/json)
    {
        "id": 1,
        "name": "Project A",
        "description": "A description of Project A.",
        "author_user": 1
    }

### Update a project [PUT /projects/{id}/]
- **Permissions:** Project owner
- **Description:** Update the details of a specific project.

+ Request (application/json)
    {
        "name": "Updated Project A",
        "description": "An updated description of Project A."
    }

+ Response 200 (application/json)
    {
        "id": 1,
        "name": "Updated Project A",
        "description": "An updated description of Project A.",
        "author_user": 1
    }

### Delete a project [DELETE /projects/{id}/]
- **Permissions:** Project owner
- **Description:** Delete a specific project.

+ Response 204

## Group Contributors

### List all contributors for a project [GET /projects/{project_id}/contributors/]
- **Permissions:** Project contributors
- **Description:** Retrieve a list of all contributors for a specific project.

+ Parameters
    + project_id: `1` (number, required) - The ID of the project.

+ Response 200 (application/json)
    [
        {
            "id": 1,
            "user": {
                "id": 2,
                "username": "user2",
                "email": "user2@example.com"
            },
            "project": 1
        },
        {
            "id": 2,
            "user": {
                "id": 3,
                "username": "user3",
                "email": "user3@example.com"
            },
            "project": 1
        }
    ]

---

### Add a contributor to a project [POST /projects/{project_id}/contributors/]
- **Permissions:** Project owner
- **Description:** Add a new contributor to a specific project.

+ Parameters
    + project_id: `1` (number, required) - The ID of the project.

+ Request (application/json)
    {
        "user": 4
    }

+ Response 201 (application/json)
    {
        "id": 3,
        "user": {
            "id": 4,
            "username": "user4",
            "email": "user4@example.com"
        },
        "project": 1
    }

---

### Retrieve a specific contributor [GET /projects/{project_id}/contributors/{contributor_id}/]
- **Permissions:** Project contributors
- **Description:** Retrieve details of a specific contributor in a project.

+ Parameters
    + project_id: `1` (number, required) - The ID of the project.
    + contributor_id: `1` (number, required) - The ID of the contributor.

+ Response 200 (application/json)
    {
        "id": 1,
        "user": {
            "id": 2,
            "username": "user2",
            "email": "user2@example.com"
        },
        "project": 1
    }

---

### Remove a contributor from a project [DELETE /projects/{project_id}/contributors/{contributor_id}/]
- **Permissions:** Project owner
- **Description:** Remove a specific contributor from a project.

+ Parameters
    + project_id: `1` (number, required) - The ID of the project.
    + contributor_id: `1` (number, required) - The ID of the contributor.

+ Response 204
---

## Group Issues

### List all issues for a project [GET /projects/{project_id}/issues/]
- **Permissions:** Project contributors
- **Description:** Retrieve a list of all issues for a specific project.

+ Parameters
    + project_id: `1` (number, required) - The ID of the project.

+ Response 200 (application/json)
    [
        {
            "id": 1,
            "title": "Fix Login Bug",
            "description": "Users cannot log in with valid credentials.",
            "priority": "high",
            "status": "to_do",
            "project": 1,
            "assigned_user": 2
        }
    ]

---

### Create an issue for a project [POST /projects/{project_id}/issues/]
- **Permissions:** Project contributors
- **Description:** Create a new issue for a specific project.

+ Parameters
    + project_id: `1` (number, required) - The ID of the project.

+ Request (application/json)
    {
        "title": "Fix Login Bug",
        "description": "Users cannot log in with valid credentials.",
        "priority": "high",
        "status": "to_do",
        "assigned_user": 2
    }

+ Response 201 (application/json)
    {
        "id": 2,
        "title": "Fix Login Bug",
        "description": "Users cannot log in with valid credentials.",
        "priority": "high",
        "status": "to_do",
        "project": 1,
        "assigned_user": 2
    }

---

### Retrieve a specific issue [GET /projects/{project_id}/issues/{issue_id}/]
- **Permissions:** Project contributors
- **Description:** Retrieve details of a specific issue in a project.

+ Parameters
    + project_id: `1` (number, required) - The ID of the project.
    + issue_id: `1` (number, required) - The ID of the issue.

+ Response 200 (application/json)
    {
        "id": 1,
        "title": "Fix Login Bug",
        "description": "Users cannot log in with valid credentials.",
        "priority": "high",
        "status": "to_do",
        "project": 1,
        "assigned_user": 2
    }

---

### Update a specific issue [PUT /projects/{project_id}/issues/{issue_id}/]
- **Permissions:** Issue author
- **Description:** Update the details of a specific issue.

+ Parameters
    + project_id: `1` (number, required) - The ID of the project.
    + issue_id: `1` (number, required) - The ID of the issue.

+ Request (application/json)
    {
        "title": "Updated Title",
        "description": "Updated description for the issue.",
        "priority": "medium",
        "status": "in_progress"
    }

+ Response 200 (application/json)
    {
        "id": 1,
        "title": "Updated Title",
        "description": "Updated description for the issue.",
        "priority": "medium",
        "status": "in_progress",
        "project": 1,
        "assigned_user": 2
    }

---

### Delete a specific issue [DELETE /projects/{project_id}/issues/{issue_id}/]
- **Permissions:** Issue author or project owner
- **Description:** Delete an issue from a project.

+ Parameters
    + project_id: `1` (number, required) - The ID of the project.
    + issue_id: `1` (number, required) - The ID of the issue.

+ Response 204

---

## Group Comments

### List all comments for an issue [GET /projects/{project_id}/issues/{issue_id}/comments/]
- **Permissions:** Project contributors
- **Description:** Retrieve a list of all comments for a specific issue.

+ Parameters
    + project_id: `1` (number, required) - The ID of the project.
    + issue_id: `1` (number, required) - The ID of the issue.

+ Response 200 (application/json)
    [
        {
            "id": 1,
            "description": "This is a comment.",
            "author_user": 1,
            "issue": 1
        }
    ]

---

### Add a comment to an issue [POST /projects/{project_id}/issues/{issue_id}/comments/]
- **Permissions:** Project contributors
- **Description:** Add a new comment to a specific issue.

+ Parameters
    + project_id: `1` (number, required) - The ID of the project.
    + issue_id: `1` (number, required) - The ID of the issue.

+ Request (application/json)
    {
        "description": "This is a critical bug.",
        "author_user": 1
    }

+ Response 201 (application/json)
    {
        "id": 2,
        "description": "This is a critical bug.",
        "author_user": 1,
        "issue": 1
    }

---

### Retrieve a specific comment [GET /projects/{project_id}/issues/{issue_id}/comments/{comment_id}/]
- **Permissions:** Project contributors
- **Description:** Retrieve details of a specific comment on an issue.

+ Parameters
    + project_id: `1` (number, required) - The ID of the project.
    + issue_id: `1` (number, required) - The ID of the issue.
    + comment_id: `1` (number, required) - The ID of the comment.

+ Response 200 (application/json)
    {
        "id": 1,
        "description": "This is a comment.",
        "author_user": 1,
        "issue": 1
    }

---

### Update a specific comment [PUT /projects/{project_id}/issues/{issue_id}/comments/{comment_id}/]
- **Permissions:** Comment author
- **Description:** Update a specific comment on an issue.

+ Parameters
    + project_id: `1` (number, required) - The ID of the project.
    + issue_id: `1` (number, required) - The ID of the issue.
    + comment_id: `1` (number, required) - The ID of the comment.

+ Request (application/json)
    {
        "description": "Updated comment text."
    }

+ Response 200 (application/json)
    {
        "id": 1,
        "description": "Updated comment text.",
        "author_user": 1,
        "issue": 1
    }

---

### Delete a specific comment [DELETE /projects/{project_id}/issues/{issue_id}/comments/{comment_id}/]
- **Permissions:** Comment author or issue author
- **Description:** Delete a specific comment from an issue.

+ Parameters
    + project_id: `1` (number, required) - The ID of the project.
    + issue_id: `1` (number, required) - The ID of the issue.
    + comment_id: `1` (number, required) - The ID of the comment.

+ Response 204